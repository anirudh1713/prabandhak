interface User {
  firstName: String!
  lastName: String!
  email: String!
  createdAt: String
  updatedAt: String
}

interface BaseError {
  message: String!
}

type Viewer implements User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  createdAt: String
  updatedAt: String
}

input RegisterUserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

type UserAlreadyExistsError implements BaseError {
  message: String!
}

type InvalidUserInputError implements BaseError {
  message: String!
}

type UserNotFoundError implements BaseError {
  message: String!
}

type RegisterUserSuccess {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  createdAt: String
  updatedAt: String
}

union RegisterUserPayload = RegisterUserSuccess | UserAlreadyExistsError | InvalidUserInputError
union MePayload = Viewer | UserNotFoundError | InvalidUserInputError

type Query {
  me(id: ID!): MePayload!
}

type Mutation {
  registerUser(registerUserInput: RegisterUserInput!): RegisterUserPayload!
}
